// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(MyTodoContext))]
    [Migration("20220724133450_EmailWorker_User")]
    partial class EmailWorker_User
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Identity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("identities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Password = "admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Password = "r1eH#emE295&",
                            UserName = "emailWorker"
                        });
                });

            modelBuilder.Entity("Entities.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("createdBy");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("permissionName");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2022, 7, 24, 13, 34, 50, 122, DateTimeKind.Utc).AddTicks(2709),
                            CreatedBy = "System",
                            PermissionName = "AdminPermission",
                            Updated = new DateTime(2022, 7, 24, 13, 34, 50, 122, DateTimeKind.Utc).AddTicks(2709),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Entities.Models.Todo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("EmailSent")
                        .HasColumnType("bit")
                        .HasColumnName("emailSent");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("updatedBy");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("todos", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("email");

                    b.Property<long>("IdentityId")
                        .HasColumnType("bigint")
                        .HasColumnName("identityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2022, 7, 24, 13, 34, 50, 122, DateTimeKind.Utc).AddTicks(2229),
                            CreatedBy = "System",
                            Email = "MyAdmin@tmp.com",
                            IdentityId = 1L,
                            Name = "MyAdmin",
                            Updated = new DateTime(2022, 7, 24, 13, 34, 50, 122, DateTimeKind.Utc).AddTicks(2232),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTime(2022, 7, 24, 13, 34, 50, 122, DateTimeKind.Utc).AddTicks(2234),
                            CreatedBy = "System",
                            Email = "MyAdmin@tmp.com",
                            IdentityId = 2L,
                            Name = "EmailWorker",
                            Updated = new DateTime(2022, 7, 24, 13, 34, 50, 122, DateTimeKind.Utc).AddTicks(2235),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permissionId");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("userPermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PermissionId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            PermissionId = 1L,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Entities.Models.Todo", b =>
                {
                    b.HasOne("Entities.Models.User", "TodoUser")
                        .WithMany("UserTodos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoUser");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Identity", "UserIdentity")
                        .WithOne("IdentityUser")
                        .HasForeignKey("Entities.Models.User", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("Entities.Models.UserPermission", b =>
                {
                    b.HasOne("Entities.Models.Permission", "UserPermission_Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "UserPermission_User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPermission_Permission");

                    b.Navigation("UserPermission_User");
                });

            modelBuilder.Entity("Entities.Models.Identity", b =>
                {
                    b.Navigation("IdentityUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Permission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserTodos");
                });
#pragma warning restore 612, 618
        }
    }
}
